.d1rhmy4{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;overflow-x:hidden;}
.d1qd4t2r{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:16.4rem 2.4rem;color:#fafafa;border-bottom:8px solid #ED707D;background-image:linear-gradient( to right, #6A5A79, #ED707D );}@media all and (max-width:480px){.d1qd4t2r{padding-top:6.4rem;padding-bottom:14rem;}}
.hiv1mzu{font-size:5.6rem;font-weight:bold;margin-bottom:0.8rem;text-shadow:0 2px 20px #6A5A79;text-align:center;}@media all and (max-width:480px){.hiv1mzu{font-size:4.8rem;}}
.s11k011r{font-size:2.4rem;color:#fff;}@media all and (max-width:480px){.s11k011r{font-size:2rem;}}
.d1aepigi{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}
.dg4x9np{width:100%;max-width:100%;margin-top:-8rem;}.dg4x9np .use-spring-carousel-main-wrapper{padding:8rem 0;margin-top:-8rem;margin-bottom:8rem;}@media all and (max-width:1440px){.dg4x9np .use-spring-carousel-main-wrapper{padding:8rem 6.4rem;}}.dg4x9np .use-spring-carousel-item{cursor:-webkit-grab;cursor:-moz-grab;cursor:grab;}.dg4x9np .use-spring-carousel-item:active{cursor:-webkit-grabbing;cursor:-moz-grabbing;cursor:grabbing;}
.d1t5bdj8{width:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}@media all and (max-width:480px){.d1t5bdj8{margin-top:-8.8rem;}}
.l1ammqmy{font-size:1.8rem;}
/*# sourceMappingURL=data:application/json;base64,*/